# 日志路径
nutshell.log.path=./logs/


# 是否启用控制台输出重定向
nutshell.console.redirect=true


# 是否Debug模式运行
nutshell.debug=true


# 是否自适应逻辑处理线程级别
# 如果开启了自动的线程登记，那么会根据业务的具体处理时长来决定该业务由哪个等级
# 的线程来执行。只有开启了逻辑线程自适应才允许配置ThreadLevel.AUTO。
nutshell.net.thread.auto=true


# 开放端口
# netty使用的端口
nutshell.net.port=6364


# 短耗时、中耗时、长耗时 线程数量
# 如果存在三级线程池，则可以在这里配置多级线程池各自的线程数量
# 允许使用"cpu"表示CPU核心数量，如果主动配置为0则关闭该线程池
# 关于线程数量，根据Amdahl定律，我们更推荐一级线程是纯粹的逻辑处理线程，所有
# 操作都是属于玩家自己的操作，都可以并行执行的，没有任何需要串行或者特别少量的
# 串行的需要，这时，高于cpu数量的线程是没有必要的，只会带来更多的上下文切换，
# 所以，我们使用cpu+1线程数。而我们的二级线程实际上是为了用户自定义路由规则而
# 设计的，用户自定义路由规则，例如：可以将同一个公会的所有操作，路由到同一根线
# 程完成，这样能避免同一个公会内部的并发。三级线程是真正的长耗时线程，这个线程
# 中的所有任务，执行时间均会比较长，有些操作涉及IO，串行执行的操作，所以我们开
# 启cpu*3的核心数，更能充分利用cpu。
#
# 设置短耗时、中耗时、长耗时线程数量
# nutshell.net.thread.count=cpu+1,cpu*2,10
# 关闭二级、三级线程池
# nutshell.net.thread.count=cpu+1,0,0
# 默认配置，启用三级线程池
nutshell.net.thread.count=cpu+1,cpu*2,cpu*3


# 线程池等级
# work线程可以由多级线程池组成，按照协议的执行时长划分为多级线程。
# 例如：配置 20,100
# 1.WorkA执行需要5ms，则分配至1级线程池。
# 2.WorkB执行需要25ms，则分配至2级线程池。
# 3.WorkC执行需要200ms，则分配至3级线程池。
# 执行时间在(-∞, index[0])的使用Netty本身的Work线程处理
# 执行时间在[index[0], index[1])的使用中执行速度线程处理
# 执行时间在[index[1], +∞)的使用低执行速度线程处理
# 不使用Netty的Work线程处理业务逻辑，只做逻辑转发
# nutshell.net.thread.level=-1,20
# 不使用Netty的Work线程和1级线程池处理业务逻辑，只做逻辑转发
# nutshell.net.thread.level=-1,-1
# 启用三级线程
nutshell.net.thread.level=20,100


# 单线程名
# 系统允许用户将业务逻辑委托给单线程完成。例如，加入\退出公会。将加入公会的业务
# 由逻辑线程交给单线程执行业务，执行完成后返回单线程执行结果。
nutshell.net.thread.simple=LEAGUE,TEAM,HOME


# redis数据地址
nutshell.redis.address=localhost:6379


# redis数据库密码
nutshell.redis.password=nutshell